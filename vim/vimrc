set nocompatible
set encoding=utf-8
scriptencoding utf-8


" use the Plug plugin manager, all plugins will be included in that config file
source $HOME/.vim/plug.vim

let mapleader = ","
" REMAP ; to :, nicer for commands
noremap ; :
" switch to directory of current file
command! CD cd %:p:h
" mouse support!
set mouse+=a

nnoremap <leader><space> :nohlsearch<cr>

set nojoinspaces  " only a single space after periods these days :(

" Colors
syntax enable               " This has to come after colorcolumn in order to draw it.
set t_Co=256                " enable 256 colors
colorscheme mydarkzen
set hlsearch

" commentary mappings
nmap <leader>c<space> <Plug>CommentaryLine
vmap <leader>c<space> <Plug>Commentary

" Tabs
set tabstop=2               " Show a tab as four spaces
set shiftwidth=2            " Reindent is also four spaces
set softtabstop=2           " When hit <tab> use four columns
set expandtab               " Create spaces when I type <tab>
set shiftround              " Round indent to multiple of 'shiftwidth'.
set autoindent              " Put my cursor in the right place when I start a new line
set modeline
filetype plugin indent on   " Rely on file plugins to handle indenting


autocmd Filetype python setlocal expandtab ts=4 sw=4 sts=4
autocmd Filetype cmake setlocal commentstring=#\ %s
autocmd Filetype cpp setlocal commentstring=//\ %s

" Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" insert one character
nnoremap <Space> :exec "normal i".nr2char(getchar())."\e"<CR>

"start at same position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" switch windows
noremap <C-h> <C-w>h
noremap <C-l> <C-w>l
noremap <C-i> <C-w>i
noremap <C-j> <C-w>j

" function for
func! DeleteTrailingWS()
  let oldhlsearch=&hlsearch
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
  let &hlsearch=oldhlsearch
endfunc
noremap <leader>w :call DeleteTrailingWS()<CR>
set list
" set listchars=eol:\|,tab:→\ ,trail:•,extends:>,precedes:<
" set listchars=tab:→\ ,trail:•,extends:>,precedes:<
set listchars=tab:→\ ,trail:•,extends:>,precedes:<

" function to convert lists to confluence formating
function ToConfluence()
  let oldhlsearch=&hlsearch
  exe "normal mz"
  %s/        -/        ****/ge
  %s/      -/      ***/ge
  %s/    -/    **/ge
  %s/  -/  */ge
  exe "normal `z"
  let &hlsearch=oldhlsearch
endfunction

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_python_python_exec = '/usr/bin/python3'
let g:syntastic_python_flake8_args = '--max-line-length=120 --copyright-check --copyright-regexp="Copyright\s+(\([Cc]\)\s+)?\d{4}\s*,?\s+[.A-Za-z, ]+"'
let g:syntastic_python_checkers = ['flake8']
"let g:pymode_python = 'python3'

let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_exec = 'cpplint'
let g:syntastic_cpp_cpplint_args = '--linelength=120 --filter=-runtime/references,-build/include_order'
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1


let g:syntastic_html_checkers=['']


" workaround for cpplint for finding the first repository, instead of the
" toplevel one that it likes
function! FindRepository(path)
  let l:git_repo = substitute(system("cd " . a:path . " && git rev-parse --show-toplevel"), '\n', '', '')
  return " --repository " . l:git_repo
endfunction

autocmd Filetype cpp let b:syntastic_cpp_cpplint_args = 
      \ get(g:, 'syntastic_cpp_cpplint_args', '') .
      \ FindRepository(expand('%:p:h'))


let g:UltiSnipsSnippetDirectories = ["UltiSnips","personal/snippets"]
let g:UltiSnipsExpandTrigger = "<tab>"

let g:airline_theme='silver'
